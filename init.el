;; disable useless gui element
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; swap control and meta on macos
(setq mac-command-modifier 'control)
(setq mac-control-modifier 'meta)

;; auto close brackets
(electric-pair-mode)

;; I don't need welcome screen
(setq inhibit-startup-screen t)

;; font
(set-face-attribute 'default nil
		    :family "JetBrains Mono" :height 140 :weight 'normal)

;; packages

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

(eval-when-compile
  (require 'use-package))

;; custom packages
(add-to-list 'load-path "~/.emacs.d/custom/")

(use-package gruvbox-theme
  :ensure t
  :config (load-theme 'gruvbox-light-soft t))

;; competition

(use-package helm
  :bind (("M-x" . helm-M-x)
	 ("C-x C-f" . helm-find-files)
	 ("C-," . helm-buffers-list)
	 ("C-x C-d" . helm-browse-project))
  :ensure t)

(use-package helm-ls-git
  :ensure t)

;; Emacs as C++ IDE

;;(use-package company
;;  :ensure t
;;  :hook (after-init . global-company-mode))

(use-package lsp-mode
  :ensure t
  :hook ((c++-mode . lsp) (c-mode . lsp))
  ;;:config ((setq lsp-modeline-code-actions)
	;;   (setq lsp-modeline-code-actions-mode-enable t))
  :bind ("C-x <mouse-1>" . lsp-find-definition))

(use-package treemacs
  :ensure t)

(use-package lsp-ui
  :ensure t)

(use-package cmake-mode
  :ensure t)

(use-package cmake-project
  :ensure t)

(use-package column-marker
  :ensure nil
  :hook (prog-mode . (lambda () (interactive) (column-marker-1 120))))

;; fast jumps

(use-package avy
  :ensure t
  :bind ("C-." . avy-goto-word-1))

(use-package ace-jump-buffer
  :ensure t)
  ;;  :bind ("C-," . ace-jump-buffer))
  

(use-package ace-window
  :ensure t
  :bind ("C-t" . ace-window))

;; usefull packages
(use-package crux
  :ensure t
  :config (recentf-mode)
  :bind (("C-c f" . crux-recentf-find-file)
	 ("C-c F" . crux-recentf-find-directory)
	 ("C-c I" . crux-find-user-init-file)
	 ("C-k" . crux-kill-whole-line)
	 ("M-o" . crux-other-window-or-switch-buffer)))

;; hightlights paste
(use-package volatile-highlights
  :ensure t
  :config (volatile-highlights-mode))

;; like rainbow indent
(use-package highlight-indent-guides
  :ensure t
  :custom (highlight-indent-guides-method 'fill)
  :hook (prog-mode . highlight-indent-guides-mode))

;; git client
(use-package magit
  :ensure t)

;; telegram client
(use-package telega
  :config (setq telega-server-libs-prefix "/opt/homebrew/Cellar/tdlib/HEAD-aefbf03")
  :ensure t)

;; pdf viewer
;;(use-package vedang/pdf-tools
;;  :config (pdf-tools-install)
;;
;;:ensure t)

(use-package webpaste
  :ensure t
  :config (setq webpaste-provider-priority '("pastebin.com")))




;; generated by use-package
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(webpaste pastebin helm-ls-git vedang/pdf-tools pdf-tools telega column-marker helm-lsp helm lsp-treemacs treemacs lsp-ui projectile free-keys ace-window magit ace-jump-buffer avy cmake-project cmake-mode lsp-mode highlight-indent-guides ace-jump-mode sublimity minimap zoxide crux use-package rainbow-delimiters gruvbox-theme company)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
